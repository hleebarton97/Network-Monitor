package com.gtek.handlers;

public class State {
	
	public static final int STATE_INIT = 0;
	public static final int STATE_RUNNING = 1;
	public static final int STATE_STOPPED = 2;
	public static final int ERROR = -1;
	
	
	
	private int current_state;				// Current state of the system.
	private String current_state_process;	// Current process within the 
											// current state.
	
	
	
	/**
	 * CONSTRUCTOR
	 * Initialize the State Handler
	 * in the initialization state
	 */
	public State() {
		this.setState(State.STATE_INIT);
		this.setStateProcess("Startup");
	}
	
	/**
	 * CONSTRUCTOR
	 * Initialize the State Handler
	 * with defined state.
	 * 
	 * @param state
	 */
	public State(int state) {
		this.setState(state);
		this.setStateProcess("Startup");
	}
	
	/**
	 * CONSTRUCTOR
	 * Initialize the State Handler
	 * with defined state and 
	 * current running process.
	 * 
	 * @param state
	 * @param proc
	 */
	public State(int state, String proc) {
		this.setState(state);
		this.setStateProcess(proc);
	}
	
	
	
	/**
	 * Increase current state to the
	 * next state. If last state, go
	 * to first state.
	 */
	public void upgradeState() {
		if(this.getState() < 2) { // -1, 0, 1
			this.setState(this.getState() + 1);
		} else { // 2
			this.setState(State.STATE_INIT);
		}
	}
	
	/**
	 * Decrease current state to the previous
	 * state. If first state, go to last state.
	 */
	public void downgradeState() {
		if(this.getState() > 0) {
			this.setState(this.getState() - 1);
		} else {
			this.setState(State.STATE_STOPPED);
		}
	}
	
	/**
	 * Set the current state of the system.
	 * 
	 * @param state
	 */
	public void setState(int state) {
		this.current_state = state;
	}
	
	/**
	 * Get the current state of the system.
	 * 
	 * @return -> current state
	 */
	public int getState() {
		return this.current_state;
	}
	
	/**
	 * Get the current state of the system in
	 * String form.
	 * 
	 * @return -> String form of the current state
	 */
	public String getStateAsString() {
		if(this.current_state == State.STATE_INIT) {
			return "INITIALIZING";
		} else if(this.current_state == State.STATE_RUNNING) {
			return "RUNNING";
		} else if(this.current_state == State.STATE_STOPPED) {
			return "STOPPED";
		} else if(this.current_state == State.ERROR) {
			return "ERROR";
		} else {
			return "STATE NOT RECOGNIZED!";
		}
	}
	
	/**
	 * Set the current running process
	 * in the current state of the
	 * system.
	 * 
	 * @param proc
	 */
	public void setStateProcess(String proc) {
		this.current_state_process = proc;
	}
	
	/**
	 * Get the current running process
	 * in the current state of the
	 * system.
	 * 
	 * @return -> running process
	 */
	public String getStateProcess() {
		return this.current_state_process;
	}

}
