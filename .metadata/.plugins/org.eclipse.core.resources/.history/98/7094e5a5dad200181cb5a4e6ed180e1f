package com.gtek.handlers;

import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;

import com.gtek.objects.NetworkSite;
import com.gtek.util.Console;

public class Ping extends TimerTask {
	
	private ArrayList<NetworkSite> NETWORK_SITE_LIST;
	private int THREAD_COUNT = 10;

	/**
	 * Create the timer object, 
	 * create the ping object,
	 * set the pingable list of
	 * network sites, and then
	 * start the timed function.
	 * 
	 * @param list
	 */
	public static void Start(ArrayList<NetworkSite> list) {
		Timer timer = new Timer();
    	Ping ping = new Ping();
    	ping.setPingable(list);
    	timer.schedule(ping, 0, (60000));
	}
	
	/**
	 * Function that is timed to run every minute
	 */
	@Override
	public void run() {
		
		// Determine how many lists to create
		// for 10 threads.
		double count = Math.floor(NETWORK_SITE_LIST.size() / THREAD_COUNT);
		Console.log("Size: " + NETWORK_SITE_LIST.size() + " | Count per Thread: " + count);
		
		for(int i = 0; i < THREAD_COUNT; i++) {
			
			if(i < THREAD_COUNT - 1) {
				Pinger pinger = new Pinger(new ArrayList(NETWORK_SITE_LIST.subList((int)(i * count), (int)((i + 1) * count))));
				pinger.start();
			} else {
				Pinger pinger = new Pinger(new ArrayList(NETWORK_SITE_LIST.subList((int)(i * count), (int)((NETWORK_SITE_LIST.size() - 1)))));
				pinger.start();
			}
			
		}
	}
	
	/**
	 * Set the pingable list of network sites
	 * 
	 * @param list
	 */
	public void setPingable(ArrayList<NetworkSite> list) {
		this.NETWORK_SITE_LIST = list;
	}
	
	

}
