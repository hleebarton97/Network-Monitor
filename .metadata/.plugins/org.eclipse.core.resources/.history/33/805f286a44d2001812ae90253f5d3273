package com.gtek.handlers;

import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;

import com.gtek.objects.NetworkSite;
import com.gtek.util.Console;

public class Ping extends TimerTask {
	
	private ArrayList<NetworkSite> NETWORK_SITE_LIST = new ArrayList<NetworkSite>();

	/**
	 * Create the timer object, 
	 * create the ping object,
	 * set the pingable list of
	 * network sites, and then
	 * start the timed function.
	 * 
	 * @param list
	 */
	public static void Start(ArrayList<NetworkSite> list) {
		Timer timer = new Timer();
    	Ping ping = new Ping();
    	ping.setPingable(list);
    	timer.schedule(ping, 0, (60000));
	}
	
	/**
	 * Function that is timed to run every minute
	 */
	@Override
	public void run() {
		
		for(NetworkSite tower : NETWORK_SITE_LIST) {
			Console.log(this.isReachable(tower.getRouter()) ? tower.getNameId() + " is up!" : tower.getNameId() + " is down!");
		}
		Console.log("DONE...");
	}
	
	
	/**
	 * Use inet address to use ICMP 
	 * ECHO Requests to get the boolean
	 * status for an address.
	 * 
	 * @param ip
	 * @return boolean
	 */
	private boolean isReachable(String ip) {
		
		try {
			
			InetAddress address = InetAddress.getByName(fake_ip);
			return address.isReachable(250);
			
		} catch (Exception e) {
			
			e.printStackTrace();
			
		}
		return false;
	}
	
	/**
	 * Set the pingable list of network sites
	 * 
	 * @param list
	 */
	public void setPingable(ArrayList<NetworkSite> list) {
		this.NETWORK_SITE_LIST = list;
	}
	
	

}
